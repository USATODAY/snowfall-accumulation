smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
#filter (id != this_feature$id) %>%
#remove any that are larger (meaning id is lower value)
filter (id >= this_feature$id)
#leave feature as is if it's on top
if (nrow(smoothed_polygons6a) <= 1){
this_feature_clipped <- this_feature
}
if (nrow(smoothed_polygons6a) > 1){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
}
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
#Skip if no intersections
#if (nrow(smoothed_polygons6a) == 0){
#  this_feature_clipped <- NULL
#}
return (this_feature_clipped)
}, mc.cores = 8L)
smoothed_polygons8 <- data.table::rbindlist(smoothed_polygons7) %>%
st_as_sf()
#st_write (smoothed_polygons5, "test_ksmooth_buff.gpkg", append=FALSE)
smoothed_polygons6 <- smoothed_polygons5 %>%
st_simplify(dTolerance = 500) %>%
st_make_valid() %>%
arrange(desc(area), desc(accumulation)) #%>%
smoothed_polygons6 <- smoothed_polygons6 %>%
mutate (id = row_number())
tictoc::tic() #269s for 72h
smoothed_polygons7 <- parallel::mclapply(1:nrow(smoothed_polygons6), function(x){
#smoothed_polygons7 <- parallel::mclapply(1:100, function(x){
#x=1452
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
#filter (id != this_feature$id) %>%
#remove any that are larger (meaning id is lower value)
filter (id >= this_feature$id)
#leave feature as is if it's on top
if (nrow(smoothed_polygons6a) <= 1){
this_feature_clipped <- this_feature
}
if (nrow(smoothed_polygons6a) > 1){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
}
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
#Skip if no intersections
#if (nrow(smoothed_polygons6a) == 0){
#  this_feature_clipped <- NULL
#}
return (this_feature_clipped)
}, mc.cores = 8L)
View(smoothed_polygons7)
#smoothed_polygons7 <- parallel::mclapply(1:100, function(x){
x=1452
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
#filter (id != this_feature$id) %>%
#remove any that are larger (meaning id is lower value)
filter (id >= this_feature$id)
#leave feature as is if it's on top
if (nrow(smoothed_polygons6a) <= 1){
this_feature_clipped <- this_feature
}
if (nrow(smoothed_polygons6a) > 1){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
}
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
#Skip if no intersections
#if (nrow(smoothed_polygons6a) == 0){
#  this_feature_clipped <- NULL
#}
return (this_feature_clipped)
smoothed_polygons7 <- parallel::mclapply(1:nrow(smoothed_polygons6), function(x){
#smoothed_polygons7 <- parallel::mclapply(1:100, function(x){
x=1452
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
#filter (id != this_feature$id) %>%
#remove any that are larger (meaning id is lower value)
filter (id >= this_feature$id)
#leave feature as is if it's on top
if (nrow(smoothed_polygons6a) <= 1){
this_feature_clipped <- this_feature
}
if (nrow(smoothed_polygons6a) > 1){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
}
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
#Skip if no intersections
#if (nrow(smoothed_polygons6a) == 0){
#  this_feature_clipped <- NULL
#}
return (this_feature_clipped)
}, mc.cores = 8L)
smoothed_polygons7 <- parallel::mclapply(1:nrow(smoothed_polygons6), function(x){
#smoothed_polygons7 <- parallel::mclapply(1:100, function(x){
#x=1452
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
#filter (id != this_feature$id) %>%
#remove any that are larger (meaning id is lower value)
filter (id >= this_feature$id)
#leave feature as is if it's on top
if (nrow(smoothed_polygons6a) <= 1){
this_feature_clipped <- this_feature
}
if (nrow(smoothed_polygons6a) > 1){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
}
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
#Skip if no intersections
#if (nrow(smoothed_polygons6a) == 0){
#  this_feature_clipped <- NULL
#}
return (this_feature_clipped)
}, mc.cores = 8L)
#smoothed_polygons7 <- parallel::mclapply(1:nrow(smoothed_polygons6), function(x){
smoothed_polygons7 <- parallel::mclapply(1:100, function(x){
#x=1452
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
#filter (id != this_feature$id) %>%
#remove any that are larger (meaning id is lower value)
filter (id >= this_feature$id)
#leave feature as is if it's on top
if (nrow(smoothed_polygons6a) <= 1){
this_feature_clipped <- this_feature
}
if (nrow(smoothed_polygons6a) > 1){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
}
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
#Skip if no intersections
#if (nrow(smoothed_polygons6a) == 0){
#  this_feature_clipped <- NULL
#}
return (this_feature_clipped)
}, mc.cores = 8L)
View(this_feature)
#smoothed_polygons7 <- parallel::mclapply(1:nrow(smoothed_polygons6), function(x){
smoothed_polygons7 <- parallel::mclapply(1:100, function(x){
#x=3699
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
#filter (id != this_feature$id) %>%
#remove any that are larger (meaning id is lower value)
filter (id > this_feature$id)
if (nrow(smoothed_polygons6a) > 0){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
} else {
this_feature_clipped <- NULL
}
return (this_feature_clipped)
}, mc.cores = 8L)
x=3699
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
#filter (id != this_feature$id) %>%
#remove any that are larger (meaning id is lower value)
filter (id >= this_feature$id)
#leave feature as is if it's on top
if (nrow(smoothed_polygons6a) <= 1){
this_feature_clipped <- this_feature
}
if (nrow(smoothed_polygons6a) > 1){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
}
return (this_feature_clipped)
#x=3699
x=2593
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
#filter (id != this_feature$id) %>%
#remove any that are larger (meaning id is lower value)
filter (id >= this_feature$id)
#leave feature as is if it's on top
if (nrow(smoothed_polygons6a) <= 1){
this_feature_clipped <- this_feature
}
if (nrow(smoothed_polygons6a) > 1){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
}
View(this_feature_clipped)
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
View(this_feature_clipped)
#x=3699
x=2593
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
#filter (id != this_feature$id) %>%
#remove any that are larger (meaning id is lower value)
filter (id >= this_feature$id)
View(smoothed_polygons6a)
#leave feature as is if it's on top
if (nrow(smoothed_polygons6a) <= 1){
this_feature_clipped <- this_feature
}
if (nrow(smoothed_polygons6a) > 1){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
}
View(this_feature_clipped)
x=3699
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
filter (id != this_feature$id)# %>%
if (nrow(smoothed_polygons6a) > 0){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
} else {
this_feature_clipped <- NULL
}
#smoothed_polygons7 <- parallel::mclapply(1:nrow(smoothed_polygons6), function(x){
smoothed_polygons7 <- parallel::mclapply(1:100, function(x){
#x=3699
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
filter (id != this_feature$id)# %>%
#remove any that are larger (meaning id is lower value)
#filter (id > this_feature$id)
if (nrow(smoothed_polygons6a) > 0){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
} else {
this_feature_clipped <- NULL
}
return (this_feature_clipped)
}, mc.cores = 8L)
tictoc::tic() #269s for 72h
smoothed_polygons7 <- parallel::mclapply(1:nrow(smoothed_polygons6), function(x){
#smoothed_polygons7 <- parallel::mclapply(1:100, function(x){
#x=3699
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
filter (id != this_feature$id)# %>%
#remove any that are larger (meaning id is lower value)
#filter (id > this_feature$id)
if (nrow(smoothed_polygons6a) > 0){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
} else {
this_feature_clipped <- this_feature
}
return (this_feature_clipped)
}, mc.cores = 8L)
tictoc::tic() #269s for 72h
smoothed_polygons7 <- parallel::mclapply(1:nrow(smoothed_polygons6), function(x){
#smoothed_polygons7 <- parallel::mclapply(1:100, function(x){
#x=3699
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
#filter (id != this_feature$id)# %>%
#remove any that are larger (meaning id is lower value)
filter (id > this_feature$id)
if (nrow(smoothed_polygons6a) > 0){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
} else {
this_feature_clipped <- this_feature
}
return (this_feature_clipped)
}, mc.cores = 8L)
file4 <- paste0(timeframe, "_inches_snow_accumulation_latest_smoothr4.json")
geojsonio::topojson_write(smoothed_polygons8,
file = file4,
object_name = "snowfall",
overwrite = TRUE)
View(smoothed_polygons7)
smoothed_polygons7[[3699]]
smoothed_polygons8 <- data.table::rbindlist(smoothed_polygons7) %>%
st_as_sf()
smoothed_polygons8 <- data.table::rbindlist(smoothed_polygons7, use.names=TRUE) %>%
st_as_sf()
View(smoothed_polygons7)
View(smoothed_polygons7[[8]])
tictoc::tic() #269s for 72h
#smoothed_polygons7 <- parallel::mclapply(1:nrow(smoothed_polygons6), function(x){
smoothed_polygons7 <- parallel::mclapply(1:100, function(x){
#x=3699
#x=2593
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
#filter (id != this_feature$id) %>%
#remove any that are larger (meaning id is lower value)
filter (id >= this_feature$id)
#leave feature as is if it's on top
if (nrow(smoothed_polygons6a) <= 1){
this_feature_clipped <- this_feature
}
if (nrow(smoothed_polygons6a) > 1){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
}
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
return (this_feature_clipped)
}, mc.cores = 8L)
smoothed_polygons8 <- data.table::rbindlist(smoothed_polygons7, use.names=TRUE) %>%
st_as_sf()
tictoc::tic() #269s for 72h
smoothed_polygons7 <- parallel::mclapply(1:nrow(smoothed_polygons6), function(x){
#smoothed_polygons7 <- parallel::mclapply(1:100, function(x){
#x=3699
#x=2593
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
#filter (id != this_feature$id) %>%
#remove any that are larger (meaning id is lower value)
filter (id >= this_feature$id)
#leave feature as is if it's on top
if (nrow(smoothed_polygons6a) <= 1){
this_feature_clipped <- this_feature
}
if (nrow(smoothed_polygons6a) > 1){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
}
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
return (this_feature_clipped)
}, mc.cores = 8L)
smoothed_polygons8 <- data.table::rbindlist(smoothed_polygons7, use.names=TRUE) %>%
st_as_sf()
tictoc::tic() #269s for 72h
smoothed_polygons7 <- parallel::mclapply(1:nrow(smoothed_polygons6), function(x){
#smoothed_polygons7 <- parallel::mclapply(1:100, function(x){
#x=3699
#x=2593
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
#filter (id != this_feature$id) %>%
#remove any that are larger (meaning id is lower value)
filter (id >= this_feature$id)
#leave feature as is if it's on top
if (nrow(smoothed_polygons6a) <= 1){
this_feature_clipped <- this_feature
}
if (nrow(smoothed_polygons6a) > 1){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
}
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
return (this_feature_clipped)
}, mc.cores = 8L)
View(smoothed_polygons7)
smoothed_polygons7 <- parallel::mclapply(1:nrow(smoothed_polygons6), function(x){
#smoothed_polygons7 <- parallel::mclapply(1:100, function(x){
#x=3699
#x=2593
this_feature <- smoothed_polygons6[x,]
intersections = st_intersects(x = smoothed_polygons6, y = smoothed_polygons6[x,])
intersections_log = lengths(intersections) > 0
smoothed_polygons6a = smoothed_polygons6[intersections_log, ] %>%
#filter (id != this_feature$id) %>%
#remove any that are larger (meaning id is lower value)
filter (id >= this_feature$id)
#leave feature as is if it's on top
if (nrow(smoothed_polygons6a) <= 1){
this_feature_clipped <- this_feature
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
}
if (nrow(smoothed_polygons6a) > 1){
smoothed_polygons6a <- smoothed_polygons6a %>%
st_union ()
this_feature_clipped <- st_difference(this_feature, smoothed_polygons6a)
# Convert geometry to MULTIPOLYGON
this_feature_clipped <- st_cast(this_feature_clipped, "MULTIPOLYGON")
}
return (this_feature_clipped)
}, mc.cores = 8L)
smoothed_polygons7[[1]]
View(smoothed_polygons7)
x=3
timeframe <- timeframes[[x]]
this_shapefile <- st_read (paste0("python/", timeframe, "_snowfall.shp")) %>%
st_make_valid () %>%
rename (accumulation = DN) %>%
filter (accumulation > 0) %>%
mutate (accumulation = case_when (
accumulation == 1 ~ 0.5,
TRUE ~ accumulation - 1
))
this_shapefile <- st_read (paste0("python/", timeframe, "_snowfall.shp")) %>%
st_make_valid () %>%
rename (accumulation = DN) %>%
filter (accumulation > 0) %>%
mutate (accumulation = case_when (
accumulation == 1 ~ 0.1,
TRUE ~ accumulation - 1),
area = st_area(geometry))
library (sf)
library (geojsonio)
library(smoothr)
smoothed_polygons <- smooth(this_shapefile, method = "ksmooth")
timeframes <- c("24h", "48h", "72h", "season")
lapply(1:3, function (x){
#x=3
timeframe <- timeframes[[x]]
this_shapefile <- st_read (paste0("python/", timeframe, "_snowfall.shp")) %>%
st_make_valid () %>%
rename (accumulation = DN) %>%
filter (accumulation > 0) %>%
mutate (accumulation = case_when (
accumulation == 1 ~ 0.1,
TRUE ~ accumulation - 1),
area = st_area(geometry))
smoothed_polygons <- smooth(this_shapefile, method = "ksmooth")
smoothed_polygons2 <- smoothed_polygons %>%
st_make_valid()
smoothed_polygons3 <- st_transform(smoothed_polygons2, crs = 5070)
#buffer single pixels at 1300
singlepixels <- smoothed_polygons3 %>%
filter (as.numeric(area) < 20000000) %>%
st_buffer (1200)
#buffer multipixel polygons s at 1500 to fill in gaps
multipixels <- smoothed_polygons3 %>%
filter (as.numeric(area) >= 20000000) %>%
st_buffer (1800)
#rejoin two types
smoothed_polygons4 <- rbind (multipixels, singlepixels) %>%
arrange (desc(area))
#smoothed_polygons4 <- st_buffer (smoothed_polygons3, 1300)
smoothed_polygons5 <- st_transform(smoothed_polygons4, crs = 4326) %>%
arrange(desc(area))
smoothed_polygons6 <- smoothed_polygons5 %>%
st_simplify(dTolerance = 500) %>%
st_make_valid() %>%
arrange(desc(area), desc(accumulation)) #%>%
file3 <- paste0("outputs/", timeframe, "/", timeframe, "_inches_snow_accumulation_latest_smoothr.json")
geojsonio::topojson_write(smoothed_polygons6,
file = file3,
object_name = "snowfall",
overwrite = TRUE)
})
